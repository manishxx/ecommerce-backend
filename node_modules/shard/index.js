(function (global, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define([], factory);
  } else if (typeof module !== 'undefined' && module.exports) {
    module.exports = factory();
  } else {
    global.shard = factory();
  }
}(this, function () {
	var codeTemplate = /*CODETEMPLATE*/"function htmlEscape(str) {\n\treturn str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/\"/g, '&quot;').replace(/'/g, '&#39;');\n}\nreturn function (_data, _callback) {\n\tvar _html = [];\n\tvar _print = function (html) {\n\t\t_html.push(html);\n\t};\n\tvar _pending = 1;\n\tfunction _decrementPending(error) {\n\t\tif (!--_pending) {\n\t\t\t_pending = -1e6; // Only return once\n\t\t\t_callback(error || null, _html.join(''));\n\t\t}\n\t}\n\tfunction _error(error) {\n\t\t_print('ERROR: ' + htmlEscape(error.message));\n\t\t_pending = 1;\n\t\t_decrementPending(error);\n\t}\n\tfunction print() { // Print all arguments, function never gets replaced\n\t\tfor (var i = 0; i < arguments.length; i++) {\n\t\t\t_print(arguments[i]);\n\t\t}\n\t}\n\tfunction printSpecial(s, value) {\n\t\tif (_s[s]) return _print(_s[s](value));\n\t\treturn 'invalid';\n\t}\n\tfunction shard(callback) {\n\t\t_pending++;\n\t\tvar id = Math.random();\n\t\t_print(id);\n\t\tvar result = function () {\n\t\t\tvar oldPrint = _print;\n\t\t\tvar index = _html.indexOf(id);\n\t\t\t_html.splice(index, 1);\n\t\t\t_print = function (html) {\n\t\t\t\t_html.splice(index++, 0, html);\n\t\t\t};\n\t\t\ttry {\n\t\t\t\tcallback.apply(this, arguments);\n\t\t\t} catch (e) {\n\t\t\t\treturn _error(e);\n\t\t\t}\n\t\t\t_decrementPending();\n\t\t\t_print = oldPrint;\n\t\t};\n\t\tresult.length = callback.length; // Don't even know if this works\n\t\treturn result;\n\t}\n\ttry {\n\t\twith (_data) {\n\t\t\t/*CODE*/\n\t\t}\n\t} catch (e) {\n\t\treturn _error(e);\n\t}\n\tif (_pending === 1 && !_callback) {\n\t\t// TODO: if callback is not set but pending is true, return a stream\n\t\tvar _result;\n\t\t_callback = function (e, r) {\n\t\t\t_result = r;\n\t\t};\n\t\t_decrementPending();\n\t\treturn _result;\n\t} else {\n\t\tsetTimeout(_decrementPending.bind(null, null), 0);\n\t}\n};\n";

    function mergeOptions(defaults, options) {
        for (var key in defaults) {
            if (options[key] && typeof options[key] === 'object' && typeof defaults[key] === 'object') {
                options[key] = mergeOptions(defaults[key], options[key]);
            } else {
                options[key] = defaults[key];
            }
        }
        return options;
    }

	function template(string, options) {
        options = mergeOptions(options || {}, template.options || {});
		var shortFunctions = options.short;

		var longestShortKey = 1;
		for (var key in shortFunctions) {
	        longestShortKey = Math.max(longestShortKey, key.length);
		}

		var parts = string.split(options.start);
		var code = [];
        if (options.extraCode) code.push(options.extraCode);
	    code.push('_print(' + JSON.stringify(parts.shift()) + ');');
		while (parts.length) {
			var part = parts.shift();
			var templateCode = part.split(options.end, 1)[0];
			var remainder = part.substring(templateCode.length).replace(options.end, '');
			var shortKey = null;
			for (var i = longestShortKey; !shortKey && i > 0; i--) {
				if (shortFunctions[templateCode.substring(0, i)]) {
					shortKey = templateCode.substring(0, i);
				}
			}
			if (shortKey) {
				code.push('_print(_s[' + JSON.stringify(shortKey) + '](' + templateCode.substring(shortKey.length) + ',print,shard));');
			} else {
				code.push(templateCode);
			}
			if (remainder) {
				code.push('_print(' + JSON.stringify(remainder) + ');');
			}
		}
	    var indented = '\t\t' + code.join('\n').replace(/\n/g, '\n\t\t');
	    var metaCode = 'with (_context) {\n' + codeTemplate.replace('/*CODE*/', indented) + '\n}';
		var debugCode = metaCode.split('\n').map(function (line, index) {
			index = (index + 2) + ""; // One because it's 1-indexed, one because it was wrapped in another function
			while (index.length < 3) index = " " + index;
			return index + ': ' + line;
		}).join('\n');
		try {
			var metaFunc = new Function('_s', '_context', metaCode);
            var result = metaFunc(shortFunctions, options.context || {});
		} catch (e) {
            //console.log(codeTemplate, indented);
			console.log(debugCode);
			throw e;
		}
		result.toString = function () {
			return 'function (_s) {\n' + metaCode + '\n}';
		};
		return result;
	}

	template.options = {
		start: '<%',
		end: '%>',
		short: {
			'=': function htmlEscape(str) {
				return (str + "").replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#39;');
			},
			'!': function rawHtml(str) {
				return (str + "");
			}
		}
	};

	return template;
}));
